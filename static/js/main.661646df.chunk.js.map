{"version":3,"sources":["utils/fetchClient.ts","types/Filters.ts","api/todos.ts","api/users.ts","components/Auth/AuthForm.tsx","components/Auth/AuthContext.tsx","components/Filter/Filter.tsx","components/TodoList/TodoList.tsx","components/ErrorMessage/ErrorMessage.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","Filters","client","patchTodo","todoId","deleteTodo","getUserByEmail","email","a","users","createUser","name","AuthForm","onLogin","useState","setEmail","setName","needToRegister","setNeedToRegister","loading","setLoading","errorMessage","setErrorMessage","saveUser","user","localStorage","setItem","useEffect","userData","getItem","parse","error","loadUser","handleSubmit","event","preventDefault","onSubmit","className","htmlFor","classNames","type","id","placeholder","disabled","value","required","onChange","e","target","minLength","AuthContext","React","createContext","AuthProvider","children","setUser","Provider","Filter","memo","filterStatus","onFilter","handleFilter","newFilterStatus","data-cy","href","selected","onClick","ALL","ACTIVE","COMPLETED","TodoList","props","todos","isProcessing","onStatusChange","onTitleChange","onDeleteTodo","selectedTodoField","useRef","selectedTodo","setSelectedTodo","newTitle","setNewTitle","handleChangeTitle","handleSaveChages","title","handleCancelChanges","key","current","focus","TransitionGroup","map","todo","completed","CSSTransition","timeout","item","checked","onBlur","onKeyDown","ref","onDoubleClick","handleStartEditTitle","includes","ErrorMessage","onCloseError","hidden","getTodoById","find","filterTodosByStatus","filter","App","useContext","newTodoField","setTodos","setFilterStatus","newTodoTitle","setNewTodoTitle","isAdding","setIsAdding","setIsProcessing","setError","showErrorTrigger","setShowErrorTrigger","visibleTodos","useMemo","activeTodosCount","length","stopIsProcessingById","prevIsProcessing","deleteTodoById","prevTodos","showErrorMessage","tick","handleAddNewTodo","replace","newTodoData","userId","newTodo","handleChangeTodo","prevIds","targetTodo","handleDeleteTodo","todosFromServer","loadTodos","errorTimeout","clearTimeout","active","forEach","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.661646df.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // wait to test loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => (\n    request<T>(url, 'POST', data)\n  ),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export enum Filters {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const postTodo = (data: Omit<Todo, 'id'>) => {\n  return client.post<Todo>('/todos', data);\n};\n\nexport const patchTodo = (\n  todoId: number,\n  data: Pick<Todo, 'completed'> | Pick<Todo, 'title'>,\n) => {\n  return client.patch<Todo>(`/todos/${todoId}`, data);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\ntype UserData = Pick<User, 'name' | 'email'>;\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { createUser, getUserByEmail } from '../../api/users';\nimport { User } from '../../types/User';\n\nexport type Props = {\n  onLogin: (user: User) => void,\n};\n\nexport const AuthForm: React.FC<Props> = ({ onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [needToRegister, setNeedToRegister] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const saveUser = (user: User) => {\n    localStorage.setItem('user', JSON.stringify(user));\n    onLogin(user);\n  };\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n\n    if (!userData) {\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userData) as User;\n\n      onLogin(user);\n    } catch (error) {\n      // Need to login\n    }\n  }, []);\n\n  const loadUser = async () => {\n    const user = await getUserByEmail(email);\n\n    if (user) {\n      saveUser(user);\n    } else {\n      setNeedToRegister(true);\n    }\n  };\n\n  const registerUser = () => {\n    return createUser({ name, email })\n      .then(saveUser);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrorMessage('');\n    setLoading(true);\n\n    try {\n      if (needToRegister) {\n        await registerUser();\n      } else {\n        await loadUser();\n      }\n    } catch (error) {\n      setErrorMessage('Something went wrtong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"box mt-5\">\n      <h1 className=\"title is-3\">\n        {needToRegister ? 'You need to register' : 'Log in to open todos'}\n      </h1>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"user-email\">\n          Email\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'is-loading': loading,\n          })}\n        >\n          <input\n            type=\"email\"\n            id=\"user-email\"\n            className={classNames('input', {\n              'is-danger': !needToRegister && errorMessage,\n            })}\n            placeholder=\"Enter your email\"\n            disabled={loading || needToRegister}\n            value={email}\n            required\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n        </div>\n\n        {!needToRegister && errorMessage && (\n          <p className=\"help is-danger\">{errorMessage}</p>\n        )}\n      </div>\n\n      {needToRegister && (\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"user-name\">\n            Your Name\n          </label>\n\n          <div\n            className={classNames('control has-icons-left', {\n              'is-loading': loading,\n            })}\n          >\n            <input\n              type=\"text\"\n              id=\"user-name\"\n              className={classNames('input', {\n                'is-danger': needToRegister && errorMessage,\n              })}\n              placeholder=\"Enter your name\"\n              required\n              minLength={4}\n              disabled={loading}\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n          </div>\n\n          {needToRegister && errorMessage && (\n            <p className=\"help is-danger\">{errorMessage}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"field\">\n        <button\n          type=\"submit\"\n          className={classNames('button is-primary', {\n            'is-loading': loading,\n          })}\n        >\n          {needToRegister ? 'Register' : 'Login'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { AuthForm } from './AuthForm';\n\nexport const AuthContext = React.createContext<User | null>(null);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AuthProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!user) {\n    return <AuthForm onLogin={setUser} />;\n  }\n\n  return (\n    <AuthContext.Provider value={user}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Filters } from '../../types/Filters';\n\ntype Props = {\n  filterStatus: Filters\n  onFilter: (filterStatus: Filters) => void;\n};\n\nexport const Filter: React.FC<Props> = React.memo(\n  ({ filterStatus, onFilter }) => {\n    const handleFilter = (newFilterStatus: Filters) => {\n      if (filterStatus !== newFilterStatus) {\n        onFilter(newFilterStatus);\n      }\n    };\n\n    const handleFilterAll = () => {\n      handleFilter(Filters.ALL);\n    };\n\n    const handleFilterActive = () => {\n      handleFilter(Filters.ACTIVE);\n    };\n\n    const handleFilterCompleted = () => {\n      handleFilter(Filters.COMPLETED);\n    };\n\n    return (\n      <nav className=\"filter\" data-cy=\"Filter\">\n        <a\n          data-cy=\"FilterLinkAll\"\n          href=\"#/\"\n          className={classNames(\n            'filter__link',\n            { selected: filterStatus === 'all' },\n          )}\n          onClick={handleFilterAll}\n        >\n          All\n        </a>\n\n        <a\n          data-cy=\"FilterLinkActive\"\n          href=\"#/active\"\n          className={classNames(\n            'filter__link',\n            { selected: filterStatus === 'active' },\n          )}\n          onClick={handleFilterActive}\n        >\n          Active\n        </a>\n        <a\n          data-cy=\"FilterLinkCompleted\"\n          href=\"#/completed\"\n          className={classNames(\n            'filter__link',\n            { selected: filterStatus === 'completed' },\n          )}\n          onClick={handleFilterCompleted}\n        >\n          Completed\n        </a>\n      </nav>\n    );\n  },\n);\n","import classNames from 'classnames';\nimport React, { useEffect, useRef, useState } from 'react';\nimport {\n  CSSTransition,\n  TransitionGroup,\n} from 'react-transition-group';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  isProcessing: number[];\n  onStatusChange: (todoId: number) => void;\n  onTitleChange: (todoId: number, newTitle: string) => void;\n  onDeleteTodo: (todoId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = (props) => {\n  const {\n    todos,\n    isProcessing,\n    onStatusChange,\n    onTitleChange,\n    onDeleteTodo,\n  } = props;\n  const selectedTodoField = useRef<HTMLInputElement>(null);\n  const [selectedTodo, setSelectedTodo] = useState<number | null>(null);\n  const [newTitle, setNewTitle] = useState<string>('');\n\n  const handleStartEditTitle = (id: number, title: string) => {\n    setSelectedTodo(id);\n    setNewTitle(title);\n  };\n\n  const handleChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTitle(event.target.value);\n  };\n\n  const handleSaveChages = (todoId: number, title: string) => {\n    setSelectedTodo(null);\n    if (newTitle === '') {\n      onDeleteTodo(todoId);\n    } else if (newTitle !== title) {\n      onTitleChange(todoId, newTitle);\n    }\n  };\n\n  const handleCancelChanges = (\n    event: React.KeyboardEvent<HTMLInputElement>,\n  ) => {\n    if (event.key === 'Escape') {\n      setSelectedTodo(null);\n    }\n  };\n\n  const handleDeleteTodo = (todoId: number) => {\n    onDeleteTodo(todoId);\n  };\n\n  useEffect(() => {\n    if (selectedTodoField.current) {\n      selectedTodoField.current.focus();\n    }\n  }, [selectedTodo]);\n\n  return (\n    <TransitionGroup>\n      {todos.map(todo => {\n        const {\n          id,\n          title,\n          completed,\n        } = todo;\n\n        return (\n          <CSSTransition\n            key={id}\n            timeout={300}\n            classNames={classNames(\n              { item: id !== 0 },\n              { 'temp-item': id === 0 },\n            )}\n          >\n            <div\n              data-cy=\"Todo\"\n              className={classNames('todo', { completed })}\n            >\n              <label className=\"todo__status-label\">\n                <input\n                  data-cy=\"TodoStatus\"\n                  type=\"checkbox\"\n                  className=\"todo__status\"\n                  checked={completed}\n                  onChange={() => onStatusChange(id)}\n                />\n              </label>\n\n              {id === selectedTodo ? (\n                <form\n                  onSubmit={event => {\n                    event.preventDefault();\n                    handleSaveChages(id, title);\n                  }}\n                >\n                  <input\n                    data-cy=\"TodoTitleField\"\n                    type=\"text\"\n                    className=\"todo__title-field\"\n                    placeholder=\"Empty todo will be deleted\"\n                    value={newTitle}\n                    onChange={handleChangeTitle}\n                    onBlur={() => handleSaveChages(id, title)}\n                    onKeyDown={handleCancelChanges}\n                    ref={selectedTodoField}\n                  />\n                </form>\n              ) : (\n                <>\n                  <span\n                    data-cy=\"TodoTitle\"\n                    className=\"todo__title\"\n                    onDoubleClick={() => handleStartEditTitle(id, title)}\n                  >\n                    {title}\n                  </span>\n\n                  <button\n                    type=\"button\"\n                    className=\"todo__remove\"\n                    data-cy=\"TodoDeleteButton\"\n                    onClick={() => handleDeleteTodo(id)}\n                  >\n                    ×\n                  </button>\n                </>\n              )}\n\n              <div\n                data-cy=\"TodoLoader\"\n                className={classNames(\n                  'modal',\n                  'overlay',\n                  { 'is-active': isProcessing.includes(id) },\n                )}\n              >\n                <div className=\"modal-background has-background-white-ter\" />\n                <div className=\"loader\" />\n              </div>\n            </div>\n          </CSSTransition>\n        );\n      })}\n    </TransitionGroup>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport classNames from 'classnames';\nimport React from 'react';\n\ntype Props = {\n  error: string;\n  onCloseError: () => void;\n};\n\nexport const ErrorMessage: React.FC<Props> = ({ error, onCloseError }) => {\n  const handleCloseError = () => {\n    onCloseError();\n  };\n\n  return (\n    <div\n      data-cy=\"ErrorNotification\"\n      className={classNames(\n        'notification',\n        'is-danger',\n        'is-light',\n        'has-text-weight-normal',\n        { hidden: !error },\n      )}\n    >\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={handleCloseError}\n      />\n\n      {error}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, {\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport {\n  deleteTodo,\n  getTodos,\n  patchTodo,\n  postTodo,\n} from './api/todos';\nimport { AuthContext } from './components/Auth/AuthContext';\nimport { Filter } from './components/Filter';\nimport { TodoList } from './components/TodoList';\nimport { ErrorMessage } from './components/ErrorMessage';\n\nimport { Filters } from './types/Filters';\nimport { Todo } from './types/Todo';\n\nconst getTodoById = (todos: Todo[], todoId: number) => {\n  return todos.find(({ id }) => id === todoId) || null;\n};\n\nconst filterTodosByStatus = (todos: Todo[], filterStatus: Filters) => {\n  switch (filterStatus) {\n    case Filters.ALL: return todos;\n    case Filters.ACTIVE: return todos.filter(({ completed }) => !completed);\n    case Filters.COMPLETED: return todos.filter(({ completed }) => completed);\n    default: throw new Error('Error: Filter todos');\n  }\n};\n\nexport const App: React.FC = () => {\n  const user = useContext(AuthContext);\n  const newTodoField = useRef<HTMLInputElement>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [filterStatus, setFilterStatus] = useState<Filters>(Filters.ALL);\n  const [newTodoTitle, setNewTodoTitle] = useState<string>('');\n  const [isAdding, setIsAdding] = useState(false);\n  const [isProcessing, setIsProcessing] = useState<number[]>([0]);\n  const [error, setError] = useState('');\n  const [showErrorTrigger, setShowErrorTrigger] = useState(0);\n\n  const visibleTodos = useMemo(\n    () => filterTodosByStatus(todos, filterStatus),\n    [todos, filterStatus],\n  );\n\n  const activeTodosCount = useMemo(\n    () => filterTodosByStatus(todos, Filters.ACTIVE).length,\n    [todos],\n  );\n\n  function stopIsProcessingById(todoId: number) {\n    setIsProcessing(prevIsProcessing => (\n      prevIsProcessing.filter(id => id !== todoId)\n    ));\n  }\n\n  function deleteTodoById(todoId: number) {\n    setTodos(prevTodos => (\n      prevTodos.filter(todo => todo.id !== todoId)\n    ));\n  }\n\n  const showErrorMessage = (errorMessage: string) => {\n    setError(errorMessage);\n    setShowErrorTrigger(tick => tick + 1);\n  };\n\n  const handleCloseError = () => {\n    setError('');\n  };\n\n  const handleNewTodoTitle = (event: React.ChangeEvent<HTMLInputElement>) => (\n    setNewTodoTitle(event.target.value)\n  );\n\n  const handleAddNewTodo = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setError('');\n\n    if (!newTodoTitle.replace(/\\s/g, '')) {\n      showErrorMessage('Title can\\'t be empty');\n      setNewTodoTitle('');\n\n      return;\n    }\n\n    if (user) {\n      setIsAdding(true);\n      const newTodoData = {\n        id: 0,\n        userId: user.id,\n        title: newTodoTitle,\n        completed: false,\n      };\n\n      setTodos(prevTodos => [...prevTodos, newTodoData]);\n      try {\n        const newTodo = await postTodo(newTodoData);\n\n        setTodos(prevTodos => [...prevTodos, newTodo]);\n        setNewTodoTitle('');\n      } catch {\n        showErrorMessage('Unable to add a todo');\n      } finally {\n        deleteTodoById(0);\n        setIsAdding(false);\n      }\n    }\n  };\n\n  const handleChangeTodo = async (todoId: number, newTitle?: string) => {\n    setError('');\n    setIsProcessing(prevIds => [...prevIds, todoId]);\n    try {\n      const targetTodo = getTodoById(todos, todoId);\n\n      if (targetTodo) {\n        await patchTodo(\n          todoId,\n          newTitle\n            ? { title: newTitle }\n            : { completed: !targetTodo.completed },\n        );\n        setTodos(prevTodos => {\n          if (newTitle) {\n            targetTodo.title = newTitle;\n\n            return [...prevTodos];\n          }\n\n          targetTodo.completed = !targetTodo.completed;\n\n          return [...prevTodos];\n        });\n      }\n    } catch {\n      showErrorMessage('Unable to update a todo');\n    } finally {\n      stopIsProcessingById(todoId);\n    }\n  };\n\n  const handleDeleteTodo = async (todoId: number) => {\n    setError('');\n    setIsProcessing(prevIds => [...prevIds, todoId]);\n\n    try {\n      await deleteTodo(todoId);\n      deleteTodoById(todoId);\n    } catch {\n      showErrorMessage('Unable to delete a todo');\n    } finally {\n      stopIsProcessingById(todoId);\n    }\n  };\n\n  const handleToggleAll = () => {\n    todos.forEach(todo => {\n      if (activeTodosCount === 0 || !todo.completed) {\n        handleChangeTodo(todo.id);\n      }\n    });\n  };\n\n  const handleClearCompleted = () => {\n    todos.forEach(todo => {\n      if (todo.completed) {\n        handleDeleteTodo(todo.id);\n      }\n    });\n  };\n\n  useEffect(() => {\n    const loadTodos = async () => {\n      if (user) {\n        try {\n          const todosFromServer = await getTodos(user.id);\n\n          setTodos(todosFromServer);\n        } catch {\n          showErrorMessage('Unable to load a todos');\n        }\n      }\n    };\n\n    loadTodos();\n  }, []);\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [isAdding]);\n\n  useEffect(() => {\n    const errorTimeout = setTimeout(() => setError(''), 3000);\n\n    return () => {\n      clearTimeout(errorTimeout);\n    };\n  }, [showErrorTrigger]);\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <header className=\"todoapp__header\">\n          {todos.length > 0 && (\n            <button\n              data-cy=\"ToggleAllButton\"\n              type=\"button\"\n              className={classNames(\n                'todoapp__toggle-all',\n                { active: activeTodosCount === 0 },\n              )}\n              onClick={handleToggleAll}\n            />\n          )}\n\n          <form\n            onSubmit={handleAddNewTodo}\n          >\n            <input\n              data-cy=\"NewTodoField\"\n              type=\"text\"\n              ref={newTodoField}\n              className=\"todoapp__new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={newTodoTitle}\n              onChange={handleNewTodoTitle}\n              disabled={isAdding}\n            />\n          </form>\n        </header>\n\n        <section className=\"todoapp__main\" data-cy=\"TodoList\">\n          <TodoList\n            todos={visibleTodos}\n            isProcessing={isProcessing}\n            onStatusChange={handleChangeTodo}\n            onTitleChange={handleChangeTodo}\n            onDeleteTodo={handleDeleteTodo}\n          />\n        </section>\n\n        {todos.length > 0 && (\n          <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n            <span className=\"todo-count\" data-cy=\"todosCounter\">\n              {`${activeTodosCount} items left`}\n            </span>\n\n            <Filter filterStatus={filterStatus} onFilter={setFilterStatus} />\n\n            <button\n              data-cy=\"ClearCompletedButton\"\n              type=\"button\"\n              className=\"todoapp__clear-completed\"\n              onClick={handleClearCompleted}\n              disabled={todos.length - activeTodosCount === 0}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )}\n      </div>\n\n      <ErrorMessage error={error} onCloseError={handleCloseError} />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\nimport { AuthProvider } from './components/Auth/AuthContext';\n\nReactDOM.render((\n  <AuthProvider>\n    <App />\n  </AuthProvider>\n), document.getElementById('root'));\n"],"sourceRoot":""}